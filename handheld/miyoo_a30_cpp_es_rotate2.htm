<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../index.htm">掌機</a> - Miyoo A30 - C/C++ - OpenGL ES 2.0 - <b>Rotate Position(Vertex)</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://www.khronos.org/assets/uploads/books/openglr_es_20_programming_guide_sample.pdf<br><br>

main.c
</p>
<pre class="brush:cpp">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;string.h&gt;
#include &lt;dlfcn.h&gt;
#include &lt;unistd.h&gt;
#include &lt;EGL/egl.h&gt;
#include &lt;GLES2/gl2.h&gt;
 
#define LCD_W   480
#define LCD_H   640
 
const char *vShaderSrc =
    "attribute vec4 a_position;   \n"
    "attribute vec2 a_texCoord;   \n"
    "varying vec2 v_texCoord;     \n"
    "void main()                  \n"
    "{                            \n"
    "   gl_Position = a_position; \n"
    "   v_texCoord = a_texCoord;  \n"
    "}                            \n";
   
const char *fShaderSrc =
    "precision mediump float;                                  \n"
    "varying vec2 v_texCoord;                                  \n"
    "uniform sampler2D s_texture;                              \n"
    "void main()                                               \n"
    "{                                                         \n"
    "    vec3 tex = texture2D(s_texture, v_texCoord).rgb;      \n"
    "    gl_FragColor = vec4(tex, 1.0);                        \n"
    "}                                                         \n";
 
int main(int argc, char** argv)
{
    EGLint egl_major = 0;
    EGLint egl_minor = 0;
    EGLint num_configs = 0;
    EGLConfig configs = {0};
    EGLDisplay display = EGL_NO_DISPLAY;
    EGLSurface surface = EGL_NO_SURFACE;
    EGLContext context = EGL_NO_CONTEXT;
    EGLint config_attribs[] = {
        EGL_SURFACE_TYPE,    EGL_WINDOW_BIT,
        EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
        EGL_RED_SIZE,   8,  
        EGL_GREEN_SIZE, 8,
        EGL_BLUE_SIZE,  8,  
        EGL_ALPHA_SIZE, 8,
        EGL_NONE
    };
    EGLint window_attributes[] = { 
        EGL_RENDER_BUFFER, EGL_BACK_BUFFER,
        EGL_NONE
    };
    EGLint const context_attributes[] = {
        EGL_CONTEXT_CLIENT_VERSION, 2,
        EGL_NONE,
    };
    GLuint vShader = 0;
    GLuint fShader = 0;
    GLuint pObject = 0;
    GLint compiled = 0;
 
    int x = 0;
    int y = 0;
    uint32_t *p = NULL;
    GLuint texID = 0;
    GLubyte *buf = NULL;
 
    GLfloat vVertices[] = {
       -1.0f,  1.0f, 0.0f,      0.0f,  0.0f,
       -1.0f, -1.0f, 0.0f,      0.0f,  1.0f,
        1.0f, -1.0f, 0.0f,      1.0f,  1.0f,
        1.0f,  1.0f, 0.0f,      1.0f,  0.0f
    };
    GLushort indices[] = {0, 1, 2, 0, 2, 3};
 
    display = eglGetDisplay(EGL_DEFAULT_DISPLAY);
    eglInitialize(display, &amp;egl_major, &amp;egl_minor);
    eglChooseConfig(display, config_attribs, &amp;configs, 1, &amp;num_configs);
    surface = eglCreateWindowSurface(display, configs, 0, window_attributes);
    context = eglCreateContext(display, configs, EGL_NO_CONTEXT, context_attributes);
    eglMakeCurrent(display, surface, surface, context);
 
    vShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vShader, 1, &amp;vShaderSrc, NULL);
    glCompileShader(vShader);
    glGetShaderiv(vShader, GL_COMPILE_STATUS, &amp;compiled);
 
    fShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fShader, 1, &amp;fShaderSrc, NULL);
    glCompileShader(fShader);
    glGetShaderiv(fShader, GL_COMPILE_STATUS, &amp;compiled);
  
    pObject = glCreateProgram();
    glAttachShader(pObject, vShader);
    glAttachShader(pObject, fShader);
    glLinkProgram(pObject);
    glUseProgram(pObject);
 
    GLint posLoc = glGetAttribLocation(pObject, "a_position");
    GLint texLoc = glGetAttribLocation(pObject, "a_texCoord");
    GLint samLoc = glGetUniformLocation(pObject, "s_texture");
 
    glGenTextures(1, &amp;texID);
    glViewport(0, 0, LCD_W, LCD_H);
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
 
    uint32_t col[] = {0xffff0000, 0xff00ff00, 0xff0000ff};
 
    buf = malloc(LCD_W * LCD_H * 4);
    p = (uint32_t *)buf;
    for (y = 0; y &lt; LCD_H; y++) {
        for (x = 0; x &lt; LCD_W; x++) {
            *p++ = col[x / 160];
        }
    }
    glBindTexture(GL_TEXTURE_2D, texID);
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, LCD_W, LCD_H, 0, GL_RGBA, GL_UNSIGNED_BYTE, buf);
 
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texID);

    vVertices[0] *= -1;
    vVertices[1] *= -1;
    vVertices[5] *= -1;
    vVertices[6] *= -1;
    vVertices[10] *= -1;
    vVertices[11] *= -1;
    vVertices[15] *= -1;
    vVertices[16] *= -1;
 
    glVertexAttribPointer(posLoc, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(GLfloat), vVertices);
    glVertexAttribPointer(texLoc, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(GLfloat), &amp;vVertices[3]);
    glEnableVertexAttribArray(posLoc);
    glEnableVertexAttribArray(texLoc);
    glUniform1i(samLoc, 0);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_SHORT, indices);
 
    eglSwapBuffers(display, surface);
    sleep(3);
 
    free(buf);
    glDeleteTextures(1, &amp;texID);
    eglMakeCurrent(display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
    eglDestroyContext(display, context);
    eglDestroySurface(display, surface);
    eglTerminate(display);
    return 0;
}
</pre><br>

<p>
編譯
</p>
<pre>
$ /opt/a30/bin/arm-linux-gcc main.c -o test -lGLESv2 -lEGL -ldl
</pre><br>

<p>
完成<br>
<img src="miyoo_a30_cpp_es_rotate2/1.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
