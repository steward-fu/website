<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../phone.htm">手機</a> - Gemini PDA 4G - Android - Termux - <b>從ArduinoDroid提取avr-as、avr-gcc</b></h3>
<hr size="1"><br>
<p>
由於Termux目前並沒有avr-gcc相關的套件可以安裝，因此，唯一的解決方式就是手動編譯avr-gcc，但是過程可以說是相當辛苦，遇到的問題超乎想像，迫使司徒放棄在Termux下編譯avr-gcc，雖然安裝Linux Deploy可以解決問題，不過每次都需要ssh登入，有點麻煩，於是司徒找尋其它可行方案，最終發現可以直接從ArduinoDroid提取使用，這才解決在Termux下使用avr-gcc的問題<br><br>

1. 安裝ArduinoDroid並開啟執行(讓其安裝相關Binary)<br>
<img src="gemini_termux_get_avr/1.jpg" class="maxSize"><br><br>

2. 執行Termux命令
</p>
<pre>
$ apt install tsu
$ cd
$ tsudo /system/bin/setenforce 0
$ tsudo cp -a /data/data/name.antonsmirnov.android.arduinodroid2/sdk/hardware/tools/avr .
$ tsudo chown `whoami`:`whoami` -R avr
$ cp -a avr/* ../usr/
$ rm avr
$ avr-gcc --help
    usage: avr-gcc [options] file...
    Options:
    -pass-exit-codes         Exit with highest error code from a phase
    --help                   Display this information
    --target-help            Display target specific command line options
    --help={common|optimizers|params|target|warnings|[^]{joined|separate|undocumented}}[,...]
                             Display specific types of command line options
    (Use '-v --help' to display command line options of sub-processes)
    --version                Display compiler version information
    -dumpspecs               Display all of the built in spec strings
    -dumpversion             Display the version of the compiler
    -dumpmachine             Display the compiler's target processor
    -print-search-dirs       Display the directories in the compiler's search path
    -print-libgcc-file-name  Display the name of the compiler's companion library
    -print-file-name=&lt;lib&gt;   Display the full path to library &lt;lib&gt;
    -print-prog-name=&lt;prog&gt;  Display the full path to compiler component &lt;prog&gt;
    -print-multiarch         Display the target's normalized GNU triplet, used as
                             a component in the library path
    -print-multi-directory   Display the root directory for versions of libgcc
    -print-multi-lib         Display the mapping between command line options and
                             multiple library search directories
    -print-multi-os-directory Display the relative path to OS libraries
    -print-sysroot           Display the target libraries directory
    -print-sysroot-headers-suffix Display the sysroot suffix used to find headers
    -Wa,&lt;options&gt;            Pass comma-separated &lt;options&gt; on to the assembler
    -Wp,&lt;options&gt;            Pass comma-separated &lt;options&gt; on to the preprocessor
    -Wl,&lt;options&gt;            Pass comma-separated &lt;options&gt; on to the linker
    -Xassembler &lt;arg&gt;        Pass &lt;arg&gt; on to the assembler
    -Xpreprocessor &lt;arg&gt;     Pass &lt;arg&gt; on to the preprocessor
    -Xlinker &lt;arg&gt;           Pass &lt;arg&gt; on to the linker
    -save-temps              Do not delete intermediate files
    -save-temps=&lt;arg&gt;        Do not delete intermediate files
    -no-canonical-prefixes   Do not canonicalize paths when building relative
                             prefixes to other gcc components
    -pipe                    Use pipes rather than intermediate files
    -time                    Time the execution of each subprocess
    -specs=&lt;file&gt;            Override built-in specs with the contents of &lt;file&gt;
    -std=&lt;standard&gt;          Assume that the input sources are for &lt;standard&gt;
    --sysroot=&lt;directory&gt;    Use &lt;directory&gt; as the root directory for headers
                             and libraries
    -B &lt;directory&gt;           Add &lt;directory&gt; to the compiler's search paths
    -v                       Display the programs invoked by the compiler
    -###                     Like -v but options quoted and commands not executed
    -E                       Preprocess only; do not compile, assemble or link
    -S                       Compile only; do not assemble or link
    -c                       Compile and assemble, but do not link
    -o &lt;file&gt;                Place the output into &lt;file&gt;
    -pie                     Create a position independent executable
    -shared                  Create a shared library
    -x &lt;language&gt;            Specify the language of the following input files
                             Permissible languages include: c c++ assembler none
                             'none' means revert to the default behavior of
                             guessing the language based on the file's extension

    Options starting with -g, -f, -m, -O, -W, or --param are automatically
    passed on to the various sub-processes invoked by avr-gcc.  In order to pass
    other options on to these processes the -W&lt;letter&gt; options must be used.

    For bug reporting instructions, please see:
    &lt;http://gcc.gnu.org/bugs.html&gt;.
</pre>

<br><script type="text/javascript" src="../tail.js"></script>
